{
	"info": {
		"_postman_id": "7311be09-3c84-4472-93cb-753e332c6cb5",
		"name": "Trello",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9752103"
	},
	"item": [
		{
			"name": "Create a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"My Board Created Successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm board valid\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).haveOwnProperty(\"id\");\r",
							"    pm.environment.set(\"aBoardId\", pm.response.json().id);\r",
							"    pm.expect(jsonData).haveOwnProperty(\"name\");\r",
							"    pm.expect(jsonData.name).to.be.eql(pm.environment.get(\"aBoardName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let boardNumber = pm.environment.get(\"boardNumber\"); \r",
							"if(!boardNumber) {\r",
							"    boardNumber = 1;\r",
							"} else {\r",
							"    boardNumber++;\r",
							"}\r",
							"pm.environment.set(\"boardNumber\", boardNumber);\r",
							"pm.environment.set(\"aBoardName\", `My Board ${boardNumber}`);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards?key={{trelloKey}}&token={{trelloToken}}&name={{aBoardName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "{{aBoardName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "My Boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const findObjectByKey = (theObjectArray, theObjectKey, theMatchValue) => theObjectArray.find((anObject) => anObject[theObjectKey] === theMatchValue)\r",
							"\r",
							"pm.test(\"My Boards Listed Successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"    // now check that we have the board that was created...\r",
							"    const theCreatedBoard = findObjectByKey(pm.response.json(), \"id\", pm.environment.get(\"aBoardId\"));\r",
							"    pm.expect(theCreatedBoard).to.be.an(\"object\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/members/:memberId/boards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"members",
						":memberId",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "memberId",
							"value": "me"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Got the board successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate board contents expected\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).haveOwnProperty(\"id\");\r",
							"    pm.expect(jsonData).haveOwnProperty(\"name\");\r",
							"    pm.expect(jsonData.name).to.be.eql(pm.environment.get(\"aBoardName\"));\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{aBoardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNumber = (size) => {\r",
							"    let minm = [\"1\"];\r",
							"    for(let index = 0; index < size - 1; index++) {\r",
							"        minm.push(\"0\");\r",
							"    }\r",
							"    minm = parseInt(minm.join(\"\"));\r",
							"\r",
							"    let maxm = [\"9\"]\r",
							"    for(let index = 0; index < size - 1; index++) {\r",
							"        maxm.push(\"9\");\r",
							"    }\r",
							"    maxm = parseInt(maxm.join(\"\"));\r",
							"    return Math.floor(Math\r",
							"    .random() * (maxm - minm + 1)) + minm;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"aListName\", `List ${randomNumber(6)}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Created List successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm list content expected\", () => {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).haveOwnProperty(\"id\");\r",
							"    pm.expect(jsonData).haveOwnProperty(\"name\");\r",
							"    pm.expect(jsonData.name).to.be.eql(pm.environment.get(\"aListName\"));\r",
							"    pm.expect(jsonData.idBoard).to.be.eql(pm.environment.get(\"aBoardId\"));\r",
							"    pm.environment.set(\"aListId\", jsonData.id);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/lists?key={{trelloKey}}&token={{trelloToken}}&idBoard={{aBoardId}}&name={{aListName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idBoard",
							"value": "{{aBoardId}}"
						},
						{
							"key": "name",
							"value": "{{aListName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create another List",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNumber = (size) => {\r",
							"    let minm = [\"1\"];\r",
							"    for(let index = 0; index < size - 1; index++) {\r",
							"        minm.push(\"0\");\r",
							"    }\r",
							"    minm = parseInt(minm.join(\"\"));\r",
							"\r",
							"    let maxm = [\"9\"]\r",
							"    for(let index = 0; index < size - 1; index++) {\r",
							"        maxm.push(\"9\");\r",
							"    }\r",
							"    maxm = parseInt(maxm.join(\"\"));\r",
							"    return Math.floor(Math\r",
							"    .random() * (maxm - minm + 1)) + minm;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"aSecondListName\", `List2 ${randomNumber(6)}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Created List successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"    pm.expect(pm.response.json()).haveOwnProperty(\"id\");\r",
							"    pm.expect(pm.response.json()).haveOwnProperty(\"name\");\r",
							"    pm.expect(pm.response.json().name).to.be.eql(pm.environment.get(\"aSecondListName\"));\r",
							"    pm.environment.set(\"aSecondListId\", pm.response.json().id);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/lists?key={{trelloKey}}&token={{trelloToken}}&idBoard={{aBoardId}}&name={{aSecondListName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idBoard",
							"value": "{{aBoardId}}"
						},
						{
							"key": "name",
							"value": "{{aSecondListName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Board Lists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const findObjectByKey = (theObjectArray, theObjectKey, theMatchValue) => theObjectArray.find((anObject) => anObject[theObjectKey] === theMatchValue)\r",
							"\r",
							"pm.test(\"My Board Lists list successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    const theJson = pm.response.json();\r",
							"    pm.expect(theJson).to.be.an(\"array\");\r",
							"    // now check that we have the list that was created...\r",
							"    const theCreatedFirstList = findObjectByKey(theJson, \"id\", pm.environment.get(\"aListId\"));\r",
							"    pm.expect(theCreatedFirstList).to.be.an(\"object\");\r",
							"    pm.expect(theCreatedFirstList.name).to.be.eql(pm.environment.get(\"aListName\"));\r",
							"    \r",
							"    const theCreatedSecondList = findObjectByKey(theJson, \"id\", pm.environment.get(\"aSecondListId\"));\r",
							"    pm.expect(theCreatedFirstList).to.be.an(\"object\");\r",
							"    pm.expect(theCreatedSecondList.name).to.be.eql(pm.environment.get(\"aSecondListName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id/lists?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{aBoardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Card",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const randomNumber = (size) => {\r",
							"    let minm = [\"1\"];\r",
							"    for(let index = 0; index < size - 1; index++) {\r",
							"        minm.push(\"0\");\r",
							"    }\r",
							"    minm = parseInt(minm.join(\"\"));\r",
							"\r",
							"    let maxm = [\"9\"]\r",
							"    for(let index = 0; index < size - 1; index++) {\r",
							"        maxm.push(\"9\");\r",
							"    }\r",
							"    maxm = parseInt(maxm.join(\"\"));\r",
							"    return Math.floor(Math\r",
							"    .random() * (maxm - minm + 1)) + minm;\r",
							"}\r",
							"\r",
							"pm.environment.set(\"aCardName\", `A Card ${randomNumber(4)}`);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Created Card successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"    pm.expect(pm.response.json()).haveOwnProperty(\"id\");\r",
							"    pm.expect(pm.response.json()).haveOwnProperty(\"name\");\r",
							"    pm.expect(pm.response.json().idList).to.be.eql(pm.environment.get(\"aListId\"));\r",
							"    pm.expect(pm.response.json().name).to.be.eql(pm.environment.get(\"aCardName\"));\r",
							"    pm.environment.set(\"aCardId\", pm.response.json().id);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/cards?idList={{aListId}}&name={{aCardName}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "idList",
							"value": "{{aListId}}"
						},
						{
							"key": "name",
							"value": "{{aCardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Cards in a List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const findObjectByKey = (theObjectArray, theObjectKey, theMatchValue) => theObjectArray.find((anObject) => anObject[theObjectKey] === theMatchValue)\r",
							"\r",
							"pm.test(\"Cards in a Lists successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json()).to.be.an(\"array\");\r",
							"\r",
							"    const theCard = findObjectByKey(pm.response.json(), \"id\", pm.environment.get(\"aCardId\"));\r",
							"    pm.expect(theCard).to.be.an(\"object\");\r",
							"    pm.expect(theCard.name).to.be.eql(pm.environment.get(\"aCardName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/lists/:id/cards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"lists",
						":id",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{aListId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Board",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"aBoardName\", pm.environment.get(\"aBoardName\") + \" change\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"My Board Updated Successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Confirm board information expected\", ()=>{\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData).haveOwnProperty(\"id\");\r",
							"    pm.expect(jsonData.id).to.be.eql(pm.environment.get(\"aBoardId\"));\r",
							"    pm.expect(jsonData).haveOwnProperty(\"name\");\r",
							"    pm.expect(jsonData.name).to.be.eql(pm.environment.get(\"aBoardName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}&name={{aBoardName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "name",
							"value": "{{aBoardName}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{aBoardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Created Card successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"    pm.expect(pm.response.json()).haveOwnProperty(\"id\");\r",
							"    pm.expect(pm.response.json()).haveOwnProperty(\"name\");\r",
							"    pm.expect(pm.response.json().idList).to.be.eql(pm.environment.get(\"aSecondListId\"));\r",
							"    pm.expect(pm.response.json().name).to.be.eql(pm.environment.get(\"aCardName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/cards/:id?key={{trelloKey}}&token={{trelloToken}}&idList={{aSecondListId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"cards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{aSecondListId}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{aCardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Deleted a card successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/cards/:cardId?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"cards",
						":cardId"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "cardId",
							"value": "{{aCardId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const cleanup = () => {\r",
							"    pm.environment.unset(\"boardNumber\");\r",
							"    pm.environment.unset(\"aBoardName\");\r",
							"    pm.environment.unset(\"aBoardId\");\r",
							"    pm.environment.unset(\"aListName\");\r",
							"    pm.environment.unset(\"aListId\");\r",
							"    pm.environment.unset(\"aSecondListName\");\r",
							"    pm.environment.unset(\"aSecondListId\");\r",
							"    pm.environment.unset(\"aCardName\");\r",
							"    pm.environment.unset(\"aCardId\");\r",
							"}\r",
							"\r",
							"pm.test(\"Deleted a board successfully\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"    cleanup();\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/1/boards/:id?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"1",
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{aBoardId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"// sharedFunctions = {",
					"//     isArray: (obj) => Array.isArray(obj),",
					"//     randomNumber: (size) => {",
					"//         let minm = [\"1\"];",
					"//         for(let index = 0; index < size - 1; index++) {",
					"//             minm.push(\"0\");",
					"//         }",
					"//         minm = parseInt(minm.join(\"\"));",
					"",
					"//         let maxm = [\"9\"]",
					"//         for(let index = 0; index < size - 1; index++) {",
					"//             maxm.push(\"9\");",
					"//         }",
					"//         maxm = parseInt(maxm.join(\"\"));",
					"//         return Math.floor(Math",
					"//         .random() * (maxm - minm + 1)) + minm;",
					"//     },",
					"//     findObjectByKey: (theObjectArray, theObjectKey, theMatchValue) => theObjectArray.find((anObject) => anObject[theObjectKey] === theMatchValue)",
					"// }",
					"",
					"// console.clear();",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					""
				]
			}
		}
	]
}